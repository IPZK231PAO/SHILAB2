# -*- coding: utf-8 -*-
"""LR_2_task_2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QPgdoDAOhKcBoF670aiCBljjhDUuvVMc
"""

import numpy as np
from sklearn import preprocessing
from sklearn.svm import SVC  # Імпорт SVC замість LinearSVC
from sklearn.model_selection import train_test_split, cross_val_score

# Вхідний файл, який містить дані
input_file = 'income_data.txt'

# Читання даних
X = []
y = []
count_class1 = 0
count_class2 = 0
max_datapoints = 1000

with open(input_file, 'r') as f:
    for line in f.readlines():
        if count_class1 >= max_datapoints and count_class2 >= max_datapoints:
            break
        if '?' in line:
            continue
        data = line.strip().split(', ')
        if data[-1] == '<=50K' and count_class1 < max_datapoints:
            X.append(data)
            count_class1 += 1
        elif data[-1] == '>50K' and count_class2 < max_datapoints:
            X.append(data)
            count_class2 += 1

# Перетворення на масив numpy
X = np.array(X)

# Перетворення рядкових даних на числові
label_encoder = []
X_encoded = np.empty(X.shape)

for i, item in enumerate(X[0]):
    if item.isdigit():
        X_encoded[:, i] = X[:, i].astype(float)  # Перетворення на float
    else:
        le = preprocessing.LabelEncoder()
        X_encoded[:, i] = le.fit_transform(X[:, i])
        label_encoder.append(le)

X = X_encoded[:, :-1].astype(int)
y = X_encoded[:, -1].astype(int)

# Розподіл на навчальну та тестову вибірки
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=5)

# Функція для оцінки класифікаторів
def evaluate_classifier(kernel_type, **kwargs):
    classifier = SVC(kernel=kernel_type, **kwargs)
    classifier.fit(X_train, y_train)
    f1_scores = cross_val_score(classifier, X, y, scoring='f1_weighted', cv=3)
    print(f"{kernel_type.capitalize()} kernel F1 score: {round(100 * f1_scores.mean(), 2)}%")
    return f1_scores.mean()

# Оцінка поліноміального ядра
polynomial_f1 = evaluate_classifier(kernel_type='poly', degree=8)

# Оцінка гаусового ядра
gaussian_f1 = evaluate_classifier(kernel_type='rbf')

# Оцінка сигмоїдального ядра
sigmoid_f1 = evaluate_classifier(kernel_type='sigmoid')

# Вивід загальних результатів
print("\nПоказники якості для різних ядер:")
print(f"Поліноміальне ядро (degree=8): F1 score = {round(100 * polynomial_f1, 2)}%")
print(f"Гаусове ядро: F1 score = {round(100 * gaussian_f1, 2)}%")
print(f"Сигмоїдальне ядро: F1 score = {round(100 * sigmoid_f1, 2)}%")